#!/bin/python3
import math
import os
import random
import re
import sys

# Complete the 'unboundedKnapsack' function below.
# The function is expected to return an INTEGER.
# The function accepts following parameters:
#  1. INTEGER k
#  2. INTEGER_ARRAY arr

def unboundedKnapsack(k, arr):
    dp = [0] * (k + 1)
    for i in range(1, k + 1):
        for item in arr:
            if item <= i:
                dp[i] = max(dp[i], dp[i - item] + item)
    return dp[k]

def main():
    import sys
    input = sys.stdin.read
    data = input().split()
    
    index = 0
    t = int(data[index])
    index += 1
    
    results = []
    for _ in range(t):
        n = int(data[index])
        k = int(data[index + 1])
        index += 2
        arr = list(map(int, data[index:index + n]))
        index += n
        results.append(unboundedKnapsack(k, arr))
    
    for result in results:
        print(result)

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    t = int(input().strip())

    first_multiple_input = input().rstrip().split()

    n = int(first_multiple_input[0])

    k = int(first_multiple_input[1])

    arr = list(map(int, input().rstrip().split()))

    result = unboundedKnapsack(k, arr)

    fptr.write(str(result) + '\n')

    fptr.close()
